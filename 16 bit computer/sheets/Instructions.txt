Opcodes are given in hexadecimal. In opcodes "x" represents a variable part of the opcode. The way it varies is described in each case, giving its value in binary.

Opcodes  |  Instructions  |  Operands  |  Description

0000        nop              None         Does nothing
          
001x        mov regd regs    None         Copies value of register regs to register regd. x = 00, 01, 10 or 11 + 00, 01, 10, 11 depending on which registers are used.
                                          For example: mov bx dx -> x = 0111, because bx would be 01 and dx would be 11

002x        mov reg num      num          Copies value num to register reg. x = 00, 01, 10 or 11 + 00 depending on which register is used.
                                          For example: mov bx 32 -> x = 0100, because bx would be 01

003x        mov reg add      add          Copies value at address add to register reg. x = 00, 01, 10 or 11 + 00 depending on which register is used.
                                          For example: mov bx [32] -> x = 0100, because bx would be 01

004x        mov add reg      add          Copies value of register reg to address add. x = 00, 01, 10 or 11 + 00 depending on which register is used.
                                          For example: mov [32] bx -> x = 0100, because bx would be 01

0050        mov add num      add, num     Copies value num to address add

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Micro Instructions:

0000 nop:
    reset counter

0010 mov ax ax:
    reset counter

0011 mov ax bx:
    bx out, ax in
    reset counter

0012 mov ax cx:
    cx out, ax in
    reset counter

0013 mov ax dx:
    dx out, ax in
    reset counter

0014 mov bx ax:
    ax out, bx in
    reset counter

0015 mov bx bx:
    reset counter

0016 mov bx cx:
    cx out, bx in
    reset counter

0017 mov bx dx:
    dx out, bx in
    reset counter

0018 mov cx ax:
    ax out, cx in
    reset counter

0019 mov cx bx:
    bx out, cx in
    reset counter

001a mov cx cx:
    reset counter

001b mov cx dx:
    dx out, cx in
    reset counter

001c mov dx ax:
    ax out, dx in
    reset counter

001d mov dx bx:
    bx out, dx in
    reset counter

001e mov dx cx:
    cx out, dx in
    reset counter

001f mov dx dx:
    reset counter


